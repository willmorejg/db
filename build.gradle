plugins {
	id 'java'
	id 'org.springframework.boot' version '2.7.14'
	id 'io.spring.dependency-management' version '1.0.15.RELEASE'
	id 'com.diffplug.spotless' version '6.19.0'
	id 'org.ysb33r.doxygen' version '0.7.0'
	// id "org.sonarqube" version "3.4.0.2513"
	id "org.sonarqube" version "4.2.0.3129"
	id 'jacoco'
	id 'project-report'
 	id 'build-dashboard'
}

group = 'net.ljcomputing'
version = '0.0.1-SNAPSHOT'
sourceCompatibility = '11'

configurations {
	compileOnly {
		extendsFrom annotationProcessor
	}
}

repositories {
    // mavenLocal()
    
    // maven {
    //     url = uri('http://localhost:8081/repository/maven-central/')
    //     allowInsecureProtocol = true
    // }

    mavenCentral()
}

dependencies {
	implementation 'org.springframework.boot:spring-boot-starter-data-jdbc'
	implementation 'org.springframework.boot:spring-boot-starter-freemarker'
	implementation 'org.springframework.boot:spring-boot-starter-validation'
	implementation 'info.picocli:picocli-spring-boot-starter:4.7.0'

	compileOnly 'org.projectlombok:lombok'

	runtimeOnly 'org.postgresql:postgresql'

	annotationProcessor 'org.springframework.boot:spring-boot-configuration-processor'
	annotationProcessor 'org.projectlombok:lombok'

	testImplementation 'org.springframework.boot:spring-boot-starter-test'
    testImplementation "org.testcontainers:testcontainers:1.18.3"
    testImplementation "org.testcontainers:junit-jupiter:1.18.3"
	testImplementation "org.testcontainers:postgresql:1.18.3"
}

java {
    withJavadocJar()
    withSourcesJar()
}
 
tasks.withType(JavaCompile) {
  dependsOn spotlessApply
  options.encoding = 'UTF-8'
}

bootRun {
    classpath = sourceSets.main.runtimeClasspath
}

jar {
    duplicatesStrategy = DuplicatesStrategy.EXCLUDE

    from {
        configurations.runtimeClasspath.collect { it.isDirectory() ? it : zipTree(it) }
    }

    manifest {
        attributes (
          'Main-Class': 'net.ljcomputing.db.DbApplication',
          'Implementation-Title': 'Database Inspector',
          'Implementation-Version': version
        )
    }
}

spotless {
  java {
    targetExclude("build/**")
    licenseHeaderFile("$rootProject.projectDir/configuration/spotless/license-header.java").updateYearWithLatest(true)
    toggleOffOn()
    trimTrailingWhitespace()
    endWithNewline()
    removeUnusedImports()
    importOrder('java', 'javax', '', '\\#')
    googleJavaFormat('1.15.0').aosp().reflowLongStrings().groupArtifact('com.google.googlejavaformat:google-java-format')
  }
}

javadoc {
  exclude("build/generated/sources/**/*.java")
	options.memberLevel = JavadocMemberLevel.PRIVATE
  failOnError(false)
}

doxygen {
  source new File(projectDir, 'src/main/java')
   project_name 'Database Inspector'
   optimize_output_java true
   javadoc_autobrief true
   extract_private true
   extract_static true
   generate_rtf true
   generate_latex true
   generate_html true
   generate_treeview true
   treeview_width 100
}

test {
  testLogging.showStandardStreams = true
  finalizedBy jacocoTestReport
  useJUnitPlatform()
}

jacocoTestCoverageVerification {
  violationRules {
    rule {
      limit {
        counter = 'LINE'
        value = 'COVEREDRATIO'
        minimum = 1.0
      }
    }
  }
}

// sonarqube {
//     properties {
// 	property "sonar.projectKey", "net.ljcomputing.db"
// 	property "sonar.host.url", "http://localhost:9005"
// 	property "sonar.login", "sqp_0ae93b405c1168104bfff825883bb7e251d5cdeb"
// 	property 'sonar.verbose', 'true'
// 	property 'sonar.sourceEncoding', 'UTF-8'
//         property 'sonar.exclusions', 'build/generated-src/**'
//   }
// }

sonarqube {
  properties {
    property "sonar.projectKey", "willmorejg_db"
    property "sonar.organization", "willmorejg"
    property "sonar.host.url", "https://sonarcloud.io"
    property 'sonar.verbose', 'true'
    property 'sonar.sourceEncoding', 'UTF-8'
  }
}
